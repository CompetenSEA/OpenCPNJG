#!/usr/bin/env python3
import argparse, os, re

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('--src-root', required=True)
    ap.add_argument('--out', required=True)
    args = ap.parse_args()
    rows = []
    for root, _, files in os.walk(args.src_root):
        for f in files:
            if not f.endswith(('.h', '.hpp', '.c', '.cc', '.cpp')):
                continue
            path = os.path.join(root, f)
            rel = os.path.relpath(path, args.src_root)
            try:
                text = open(path, 'r', errors='ignore').read()
            except Exception:
                text = ''
            classes = ', '.join(re.findall(r'^\s*class\s+(\w+)', text, re.M)[:2])
            funcs = ', '.join(re.findall(r'^\s*(\w[\w\d_:<>]*)\s+\w+\s*\([^;]*\)\s*\{', text, re.M)[:2])
            rows.append((rel, classes or funcs or 'n/a', 'autogenerated', ''))
    rows.sort()
    with open(args.out, 'w') as out:
        out.write('# Vendored OpenCPN subset\n\n')
        out.write('| File | Key classes/functions | Purpose | Notes |\n')
        out.write('| --- | --- | --- | --- |\n')
        for r in rows:
            out.write(f"| `{r[0]}` | {r[1]} | {r[2]} | {r[3]} |\n")
    print(f"wrote {len(rows)} entries to {args.out}")

if __name__ == '__main__':
    main()
